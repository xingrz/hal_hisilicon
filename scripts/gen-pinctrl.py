# Copyright (c) 2023 Chen Xingyu <hi@xingrz.me>
# SPDX-License-Identifier: Apache-2.0

"""
Utility to autogenerate pinctrl definitions.

Usage::
    python3 scripts/gen-pinctrl.py [-i /path/to/pinconfigs] [-o /path/to/include]
"""

from pathlib import Path
import argparse
import yaml

REPO_ROOT = Path(__file__).absolute().parents[1]

HEADER = """/*
 * This file is autogenerated by scripts/gen-pinctrl.py
 * SPDX-License-Identifier: Apache-2.0
 */

#pragma once

"""


def generate_header(outdir: Path, model: str, pads: dict):
    path = outdir / f"{model}-pinctrl.h"
    with open(path, "w") as f:
        f.write(HEADER)

        common = f"{model}-pinctrl-common.h"
        f.write(f"#include <zephyr/dt-bindings/pinctrl/{common}>\n")
        f.write(f"\n")

        for item in pads:
            for i, signal in enumerate(item["signals"]):
                prefix = model.upper()

                # if signal is someting like "GPIO[x]", remove the tailing "[x]"
                signal_name = signal.split("[")[0]

                ds_bits = item['drive_strength']
                if len(ds_bits) == 2:
                    ds_def = ((ds_bits[0] << 1) |
                              (ds_bits[1]))
                    ds_msk = 0x3
                elif len(ds_bits) == 3:
                    ds_def = ((ds_bits[0] << 2) |
                              (ds_bits[1] << 1) |
                              (ds_bits[2]))
                    ds_msk = 0x7
                else:
                    raise ValueError("Invalid drive strength")

                f.write(f"/* {signal} */\n")
                f.write(f"#define {item['reg']}_{signal_name} \\\n")
                f.write(f"\t{prefix}_PINMUX("
                        f"{item['pad']}, "
                        f"{i}, "
                        f"{hex(ds_def)}, "
                        f"{hex(ds_msk)})\n")
                f.write(f"\n")


def main(indir: Path, outdir: Path):
    if outdir.exists():
        for entry in outdir.glob("hi*-pinctrl.h"):
            entry.unlink()
    else:
        outdir.mkdir(parents=True)

    for entry in indir.iterdir():
        if not entry.is_file() or entry.suffix not in (".yml", ".yaml"):
            continue

        model = entry.stem

        config = yaml.load(open(entry), Loader=yaml.Loader)
        pads = config["pads"]

        generate_header(outdir, model, pads)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-i",
        "--indir",
        type=Path,
        default=REPO_ROOT / "pinconfigs",
        help="Directory of pin configs")
    parser.add_argument(
        "-o",
        "--outdir",
        type=Path,
        default=REPO_ROOT / "include" / "zephyr" / "dt-bindings" / "pinctrl",
        help="Directory to output")
    args = parser.parse_args()
    main(args.indir, args.outdir)
